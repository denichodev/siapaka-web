import React from "react";
import { useRetrieve, useCache, useError, useInvalidator } from "rest-hooks";

export const useTextInput = (defaultValue = "") => {
  const [value, setValue] = React.useState(defaultValue);
  const handleValueChange = ({ target }) => {
    setValue(target.value);
  };

  return [value, handleValueChange];
};

export const useInvalidateOnUnmount = (fetchShape, params) => {
  const invalidate = useInvalidator(fetchShape);

  React.useEffect(() => {
    return () => invalidate(params);
  }, []);
};

/** If the invalidIfStale option is set we suspend if resource has expired */
export const hasUsableData = (resource, fetchShape) => {
  return !(
    (fetchShape.options && fetchShape.options.invalidIfStale) ||
    !resource
  );
};

/** Ensure a resource is available; loading and error returned explicitly. */
export const useStatefulResource = (fetchShape, params) => {
  let maybePromise = useRetrieve(fetchShape, params);
  const resource = useCache(fetchShape, params);

  const loading =
    !hasUsableData(resource, fetchShape) &&
    maybePromise &&
    typeof maybePromise.then === "function";

  let error = useError(fetchShape, params, resource);

  return {
    data: resource,
    loading,
    error
  };
};
