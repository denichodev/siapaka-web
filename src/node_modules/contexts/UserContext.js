import React from 'react';
import { withRouter } from 'react-router-dom';
import { useCookies } from 'react-cookie';
import apiClient from 'apiClient';

const login = (email, password) => {
  return apiClient.post('/api/login', {
    email,
    password
  });
};

const defaultValue = {
  me: null,
  token: '',
  login,
  setAuthToken: () => {},
  logout: () => {}
};

const UserContext = React.createContext(defaultValue);

export const UserProvider = withRouter(props => {
  const [cookies, setCookie, removeCookie] = useCookies();
  const [user, setUser] = React.useState({
    me: null,
    login,
    setAuthToken: token => {
      setCookie('token', token);
    },
    logout: () => {
      removeCookie('token');
      setUser({
        ...user,
        me: null
      });
    }
  });

  const fetchMe = () => {
    apiClient.defaults.headers.common = {
      Authorization: `Bearer ${cookies.token}`
    };

    apiClient
      .get('/api/me')
      .then(res => {
        setUser({
          ...user,
          me: res.data
        });
      })
      .catch(err => {
        if (err.response.status === 401) {
          removeCookie('token');
          props.history.replace('/login');
        }
      });
  };

  React.useEffect(() => {
    // punya token dan hal login
    // punya token dan bukan hal login
    // gapunya token dan hal login
    // gapunya token dan bukan hal login
    const isLoginPage = props.location.pathname.includes('/login');

    if (!cookies.token && !isLoginPage) {
      props.history.replace('/login');
    }

    if (cookies.token && isLoginPage) {
      if (user.me) {
        props.history.replace('/home');
      } else {
        fetchMe();
      }
    }

    if (cookies.token && !isLoginPage) {
      if (!user.me) {
        fetchMe();
      }
    }
  });

  return (
    <UserContext.Provider value={user}>{props.children}</UserContext.Provider>
  );
});

export default UserContext;
